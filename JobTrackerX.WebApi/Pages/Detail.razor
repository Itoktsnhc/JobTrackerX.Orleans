@page "/{JobId:long}"
@inject IJobTrackerService _service
@inject IMapper _mapper
@inject IToastService _toastService
@inject IOptions<WebUiConfig> _options
@implements IDisposable

@if (_jobEntity == null)
{
    if (_isJobEntityLoadFinish)
    {
        <p class="h2 text-center bg-danger">
            <em>加载失败：@JobId</em>
        </p>
    }
    else
    {
        <p class="h2 text-center bg-light">
            加载中：@JobId
        </p>
    }
}
else
{
    <div class="container" style="max-width: 1440px; margin: 0 auto;}">
        <p class="h2">任务详情 <a target="_blank" href="@_jobEntity.PreviewPath">Job Graph</a></p>
        <br/>
        <table class="table table-sm table-hover text-left">
            <tbody>
            <tr>
                <td>任务Id (@nameof(_jobEntity.JobId)): </td>
                <td class="font-weight-bold">@_jobEntity.JobId</td>
            </tr>
            <tr>
                <td>上级任务Id (@nameof(_jobEntity.ParentJobId)): </td>
                <td>
                    @if (_jobEntity.ParentJobId.HasValue)
                    {
                        <a href="@_jobEntity.ParentJobPath">@(_jobEntity.ParentJobId.Value.ToString())</a>
                    }
                    else
                    {
                        <span>@Constants.NotAvailableStr</span>
                    }
                </td>
            </tr>
            <tr>
                <td>根任务Id (@nameof(_jobEntity.AncestorJobId)): </td>
                <td>
                    <a href="@_jobEntity.AncestorJobPath">@_jobEntity.AncestorJobId</a>
                </td>
            </tr>
            <tr>
                <td>任务名称 (@nameof(_jobEntity.JobName)): </td>
                <td>@_jobEntity.JobName</td>
            </tr>
            <tr>
                <td>执行耗时 (ExecutionTime): </td>
                <td>
                    @if (!_jobEntity.StartTime.HasValue && !_jobEntity.EndTime.HasValue)
                    {
                        <span>@Constants.NotAvailableStr</span>
                    }
                    else
                    {
                        <span>
                            @(_jobEntity.StartTime.HasValue ? _jobEntity.StartTime.Value.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUiShowDateTimeFormat) : Constants.NotAvailableStr)
                            ->
                            @(_jobEntity.EndTime.HasValue ? _jobEntity.EndTime.Value.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUiShowDateTimeFormat) : Constants.NotAvailableStr)
                            : [@(GetTimeSpanStr(_jobEntity.StartTime, _jobEntity.EndTime))]
                        </span>
                    }
                </td>
            </tr>
            <tr>
                <td>状态 (@nameof(_jobEntity.CurrentJobState)): </td>
                <td>
                    <span class="@(Helper.GetStateBadgeColor(_jobEntity.CurrentJobState))">@(_jobEntity.CurrentJobState)</span>
                </td>
            </tr>
            <tr>
                <td>状态变化 (@nameof(_jobEntity.StateChanges))</td>
                <td>
                    <ul class="list-group small list-group-flush">

                        @foreach (var stateChange in _jobEntity.StateChanges.OrderBy(s => s.TimePoint))
                        {
                            <li class="list-group-item">
                                <span> @stateChange.TimePoint.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUiShowDateTimeFormat) - </span>
                                <span class="@Helper.GetStateBadgeColor(stateChange.State)">@stateChange.State</span>
                                @if (!string.IsNullOrEmpty(stateChange.AdditionMsg))
                                {
                                    <span> - @stateChange.AdditionMsg</span>
                                }

                            </li>
                        }
                    </ul>
                </td>
            </tr>
            @if (_jobEntity.TotalChildrenCount > 0)
            {
                <tr>
                    <td>子任务进度: </td>
                    <td>
                        <div class="badge badge-pill badge-success">成功: @_jobEntity.SuccessfulChildrenCount</div>
                        <div class="badge badge-pill badge-danger">失败: @_jobEntity.FailedChildrenCount</div>
                        <div class="badge badge-pill badge-info">总数: @_jobEntity.TotalChildrenCount</div>
                        <div class="badge badge-pill badge-secondary">等待: @_jobEntity.PendingChildrenCount</div>
                        <br/>
                        <div class="progress" style="max-width:300px">
                            <div class="progress-bar @(_jobEntity.FailedChildrenCount > 0 ? " bg-danger" : "bg-success")"
                                 role="progressbar"
                                 style="width:@(((_jobEntity.TotalChildrenCount - _jobEntity.PendingChildrenCount) / (_jobEntity.TotalChildrenCount * 1.0)).ToString(Constants.PercentageFormat))">
                            </div>
                        </div>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td>无子任务信息</td>
                    <td></td>
                </tr>
            }
            <tr>
                <td>附加信息 (@nameof(_jobEntity.Options)): </td>
                <td>
                    <p style="max-width:1024px">@_jobEntity.Options</p>
                </td>
            </tr>
            <tr>
                <td>创建人 (@nameof(_jobEntity.CreatedBy)): </td>
                <td>
                    @(_jobEntity.CreatedBy ?? Constants.NotAvailableStr)
                </td>
            </tr>
            <tr>
                <td>Tags : </td>
                <td>
                    @if (_jobEntity.Tags?.Any() == true)
                    {
                        foreach (var tag in _jobEntity.Tags)
                        {
                            <span class="@Constants.TagClassStr">@tag</span>
                        }
                    }
                </td>
            </tr>
            <tr>
                <td>来源链接 (@nameof(_jobEntity.SourceLink)): </td>
                <td>
                    @if (!string.IsNullOrEmpty(_jobEntity.SourceLink))
                    {
                        <a target="_blank" href="@_jobEntity.SourceLink">@_jobEntity.SourceLink</a>
                    }
                    else
                    {
                        <span>@Constants.NotAvailableStr</span>
                    }

                </td>
            </tr>
            <tr>
                <td>任务日志 (JobLogs): </td>
                <td>
                    @if (string.IsNullOrWhiteSpace(jobLogUrl))
                    {
                        <span>@Constants.NotAvailableStr</span>
                    }
                    else
                    {
                        <a target="_blank" href="@jobLogUrl">下载任务日志</a>
                    }
                </td>
            </tr>
            <tr>
                <td>概览 (JobStatistics): </td>
                <td>
                    @if (_jobTreeStatistics?.TreeStart != null || _jobTreeStatistics?.TreeEnd != null)
                    {
                        <span>
                            @(_jobTreeStatistics.TreeStart == null ?
                                Constants.NotAvailableStr :
                                $"{_jobTreeStatistics.TreeStart.TimePoint.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUiShowDateTimeFormat)}({_jobTreeStatistics.TreeStart.SourceJobId})")
                            ->
                            @(_jobTreeStatistics.TreeEnd == null ?
                                Constants.NotAvailableStr :
                                $"{_jobTreeStatistics.TreeEnd.TimePoint.ToOffset(TimeSpan.FromHours(8)).DateTime.ToString(Constants.WebUiShowDateTimeFormat)} ({_jobTreeStatistics.TreeEnd.SourceJobId})")
                            : [@(GetTimeSpanStr(_jobTreeStatistics?.TreeStart?.TimePoint, _jobTreeStatistics?.TreeEnd?.TimePoint))]
                        </span>
                    }
                    else
                    {
                        <span>@Constants.NotAvailableStr</span>
                    }
                </td>
            </tr>
            </tbody>
        </table>
        <br/>
        <hr/>
    </div>
    @if (ChildrenInternal?.Any() == true)
    {
        <div class="container" style="max-width: 4096px; margin: 0 auto;}">
            <div>
                <p class="h2">子任务</p>
                <button class="btn btn-secondary" @onclick="@(e => OnRefreshChildrenClickedAsync())">RefreshChildren</button>
                <span class="small">条数: @totalCount</span>
                <div class="form-group float-right">
                    <select @onchange="@(e => ApplyQueryByStatusAsync(e))" class="form-control">
                        <option class="text-white-50" value="-1">@Constants.NotAvailableStr</option>
                        <option class="text-primary" value="@((int)JobState.WaitingToRun)">@nameof(JobState.WaitingToRun)</option>
                        <option class="text-danger" value="@((int)JobState.Faulted)">@nameof(JobState.Faulted)</option>
                        <option class="text-success" value="@((int)JobState.RanToCompletion)">@nameof(JobState.RanToCompletion)</option>
                        <option class="text-info" value="@((int)JobState.Running)">@nameof(JobState.Running)</option>
                        <option class="text-secondary" value="@((int)JobState.WaitingForChildrenToComplete)">@nameof(JobState.WaitingForChildrenToComplete)</option>
                    </select>
                </div>
            </div>
            <div class="table-responsive-md text-center">
                <table class="table table-striped table-sm table-hover">
                    <thead class="thead-light">
                    <tr>
                        <th>JobId</th>
                        <th>JobName</th>
                        <th>JobStatus</th>
                        <th>CreateTime</th>
                        <th>StartTime</th>
                        <th>EndTime</th>
                        <th>ExecutionTime</th>
                        <th>Tags</th>
                        <th>CreatedBy</th>
                        @if (Children.Any(s => s.TotalChildrenCount > 0))
                        {
                            <th>
                                ChildrenProgress
                            </th>
                            <th>Graph</th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var child in Children)
                    {
                        <tr>
                            <td>
                                <a href="@child.DetailPath">@child.JobId</a>
                            </td>
                            <td>@child.JobName</td>
                            <td>
                                <span class="@(Helper.GetStateBadgeColor(child.CurrentJobState))">
                                    @child.CurrentJobState
                                </span>
                            </td>
                            <td>@(child.CreateTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUiShowDateTimeFormat) ?? Constants.NotAvailableStr)</td>
                            <td>@(child.CalculatedStartTimeStr)</td>
                            <td>@(child.CalculatedEndTimeStr)</td>
                            <td>@(child.CalculatedExecutionTimeStr)</td>
                            <td>
                                @if (child.Tags?.Any() == true)
                                {
                                    foreach (var tag in child.Tags)
                                    {
                                        <span class="badge badge-dark badge-pill">@tag</span>
                                    }
                                }
                            </td>
                            <td>@child.CreatedBy</td>
                            @if (child.TotalChildrenCount > 0)
                            {
                                <td>
                                    <div class="progress" style="max-width:300px">
                                        <div class="progress-bar @(child.FailedChildrenCount > 0 ? " bg-danger" : "bg-success")"
                                             role="progressbar"
                                             style="width:@(((child.TotalChildrenCount - child.PendingChildrenCount) / (child.TotalChildrenCount * 1.0)).ToString(Constants.PercentageFormat))">
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <a target="_blank" href="@child.PreviewPath">Preview</a>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div>
                <div class="float-left">
                    <span>Set page size:</span>
                    <input type="text" style="max-width:50px" @bind-value="@setPageSize" @onblur="@(e => RefreshByPageSizeAsync())"/>
                </div>
                <div class="float-right">
                    <select class="custom-select" @onchange="@(e => GoToPageNumberAsync(e))">
                        @for (int i = 1; i <= MaxPageNumber; i++)
                        {
                            if (pageNumber == i)
                            {
                                <option value="@i" selected="selected">@i</option>
                            }
                            else
                            {
                                <option value="@i">@i</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
    }
    else
    {
        if (_isJobChildrenLoadFinish)
        {
            if (_jobEntity.ChildrenStatesDic.Count > 0)
            {
                <p class="h2 text-center bg-danger">
                    <em>子任务加载失败：@JobId </em>
                </p>
            }
        }
        else
        {
            <p class="h2 text-center bg-light">
                子任务加载中：@JobId 。。。
            </p>
        }
    }
}

@code{

    [Parameter]
    public long JobId { get; set; }

    private int MaxPageNumber
    {
        get { return (int)Math.Ceiling((totalCount * 1.0) / pageSize); }
    }

    private int pageSize = 10;
    private int setPageSize = 10;
    private int pageNumber = 1;
    private int totalCount = 0;
    private int JobStateFilter = -1;

    private IList<JobEntityViewModel>
    Children;

    private List<JobEntityViewModel>
    ChildrenInternal = new List<JobEntityViewModel>();

    private JobEntityViewModel _jobEntity;
    private JobTreeStatistics _jobTreeStatistics;
    private Task _refresher;
    private CancellationTokenSource _cancelRefreshSource = new CancellationTokenSource();
    private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(1, 1);
    private bool _isJobEntityLoadFinish = false;
    private bool _isJobChildrenLoadFinish = false;
    private string jobLogUrl = null;

    protected override void OnInitialized()
    {
        BuildTask();
    }

    private string GetTimeSpanStr(DateTimeOffset? start, DateTimeOffset? end)
    {
        if (!start.HasValue)
        {
            return Constants.NotAvailableStr;
        }
        if (!end.HasValue)
        {
            end = DateTimeOffset.Now;
        }
        return GetTimeSpanStr((end - start).Value);
    }

    private string GetTimeSpanStr(TimeSpan? ts)
    {
        if (!ts.HasValue)
        {
            return Constants.NotAvailableStr;
        }
        if (ts.Value.TotalDays >= 1)
        {
            return ts.Value.ToString("d'天 'h'时 'm'分 's'秒'");
        }
        if (ts.Value.TotalHours >= 1)
        {
            return ts.Value.ToString("h'时 'm'分 's'秒'");
        }
        if (ts.Value.TotalMinutes >= 1)
        {
            return ts.Value.ToString("m'分 's'秒'");
        }
        if (ts.Value.TotalSeconds >= 1)
        {
            return ts.Value.ToString("s'秒'");
        }
        return $"{ts.Value.TotalSeconds.ToString(Constants.DecimalFormat)}秒";
    }

    private async Task LoadJobEntityAsync()
    {
        try
        {
            _jobEntity = _mapper.Map<JobEntityViewModel>(await _service.GetJobByIdAsync(JobId));
            _jobTreeStatistics = await _service.GetJobStatisticsByIdAsync(JobId);
            jobLogUrl = await _service.GetJobLogUrlAsync(JobId);
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message, "加载详情错误");
        }
    }

    private async Task LoadJobChildrenAsync(bool force = false)
    {
        try
        {
            await _semaphore.WaitAsync(_cancelRefreshSource.Token);
            if (force || ChildrenInternal?.Any() != true)
            {
                ChildrenInternal = _mapper.Map<List<JobEntityViewModel>>((await _service.GetChildrenEntitiesAsync(JobId)).Where(s => s.JobId != JobId).OrderBy(s => s.JobId));
            }
            var skip = pageSize * (pageNumber - 1);

            if (JobStateFilter < 0)
            {
                totalCount = ChildrenInternal.Count;
                Children = ChildrenInternal.Skip(skip).Take(pageSize).ToList();
            }
            else
            {
                var status = (JobState)JobStateFilter;
                var targetCollection = ChildrenInternal.Where(s => s.CurrentJobState == status).ToList();
                totalCount = targetCollection.Count;
                Children = targetCollection.Skip(skip).Take(pageSize).ToList();
            }
            var statisticsResult = await _service.GetJobStatisticsListByIdsAsync(Children.Select(s => s.JobId));
            foreach (var child in Children)
            {
                statisticsResult.TryGetValue(child.JobId, out var statistics);
                if (statistics?.TreeStart == null && statistics?.TreeEnd == null)
                {
                    child.CalculatedExecutionTimeStr = GetTimeSpanStr(child.StartTime, child.EndTime);
                    child.CalculatedEndTimeStr = child.EndTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUiShowDateTimeFormat) ?? Constants.NotAvailableStr;
                    child.CalculatedStartTimeStr = child.StartTime?.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUiShowDateTimeFormat) ?? Constants.NotAvailableStr;
                }
                else
                {
                    child.CalculatedExecutionTimeStr = GetTimeSpanStr(statistics?.TreeStart?.TimePoint, statistics?.TreeEnd?.TimePoint);
                    child.CalculatedEndTimeStr = statistics.TreeEnd?.TimePoint.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUiShowDateTimeFormat) ?? Constants.NotAvailableStr;
                    child.CalculatedStartTimeStr = statistics.TreeStart?.TimePoint.ToOffset(TimeSpan.FromHours(8)).ToString(Constants.WebUiShowDateTimeFormat) ?? Constants.NotAvailableStr;
                }
            }
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message, "加载子任务错误");
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private async Task ApplyQueryByStatusAsync(ChangeEventArgs e)
    {
        var val = int.Parse(e.Value.ToString());
        JobStateFilter = val;
        pageNumber = 1;
        await LoadJobChildrenAsync();
    }

    private async Task GoToPageNumberAsync(ChangeEventArgs e)
    {
        pageNumber = int.Parse(e.Value.ToString());
        await LoadJobChildrenAsync();
    }

    private async Task RefreshByPageSizeAsync()
    {
        if (setPageSize == pageSize)
        {
            return;
        }
        if (setPageSize > 100)
        {
            setPageSize = 100;
        }
        if (setPageSize < 1)
        {
            setPageSize = 10;
        }
        pageSize = setPageSize;
        pageNumber = 1;
        await LoadJobChildrenAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadJobEntityAsync();
        _isJobEntityLoadFinish = true;
        await LoadJobChildrenAsync(true);
        _isJobChildrenLoadFinish = true;
    }

    private async void OnRefreshChildrenClickedAsync()
    {
        pageNumber = 1;
        await LoadJobChildrenAsync(true);
        await InvokeAsync(StateHasChanged);
        _toastService.ShowSuccess("子任务加载完成");
    }

    private async Task RefreshCurrentDataAsync()
    {
        if (_jobEntity != null)
        {
            if (Helper.FinishedOrFaultedJobStates.Contains(_jobEntity.CurrentJobState))
            {
                return;
            }
            await LoadJobEntityAsync();
            await LoadJobChildrenAsync(true);

            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        DisposeTask();
    }

    public void DisposeTask()
    {
        _cancelRefreshSource.Cancel();
        _cancelRefreshSource.Dispose();
        _semaphore.Dispose();
    }

    public void BuildTask()
    {
        _refresher = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(_options.Value.FirstUiRefreshDelay, _cancelRefreshSource.Token);

                while (!_cancelRefreshSource.Token.IsCancellationRequested)
                {
                    try
                    {
                        await RefreshCurrentDataAsync();
                    }
                    catch (Exception ex)
                    {
                        _toastService.ShowError(ex.Message, nameof(RefreshCurrentDataAsync));
                    }
                    await Task.Delay(_options.Value.UiRefreshInterval, _cancelRefreshSource.Token);
                }
            }
            catch (TaskCanceledException)
            {
            }
        });
    }

}